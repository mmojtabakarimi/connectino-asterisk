Index: asterisk-18.8.0/main/dns_recurring.c
===================================================================
--- asterisk-18.8.0.orig/main/dns_recurring.c
+++ asterisk-18.8.0/main/dns_recurring.c
@@ -39,11 +39,12 @@
 
 #include <arpa/nameser.h>
 
 /* \brief Delay between TTL expiration and the next DNS query, to make sure the
 resolver cache really expired. */
+#define DEFAULT_TTL 30
 #define EXTRA_TTL 2
 #define MAX_TTL ((INT_MAX - EXTRA_TTL) / 1000)
 
 /*! \brief Destructor for a DNS query */
 static void dns_query_recurring_destroy(void *data)
 {
@@ -96,14 +103,20 @@ static void dns_query_recurring_resoluti
 	/* So.. if something has not externally cancelled this we can reschedule based on the TTL */
 	if (!recurring->cancelled) {
 		const struct ast_dns_result *result = ast_dns_query_get_result(query);
-		int ttl = MIN(ast_dns_result_get_lowest_ttl(result), MAX_TTL);
 
-		if (ttl) {
-			recurring->timer = ast_sched_add(ast_dns_get_sched(), (ttl + EXTRA_TTL) * 1000, dns_query_recurring_scheduled_callback, ao2_bump(recurring));
-			if (recurring->timer < 0) {
-				/* It is impossible for this to be the last reference as the query has a reference to it */
-				ao2_ref(recurring, -1);
-			}
+		int ttl = MIN(ast_dns_result_get_lowest_ttl(result), MAX_TTL);
+
+		/* If TTL is zero, DNS cache has expired. In which case set the next query to a sane
+		 * default value to avoid overloading the DNS server if TTL is always 0
+		 */
+		if (!ttl && (ttl = DEFAULT_TTL)) {
+			ast_debug(2, "TTL value of 0, forcing default value of %u", ttl);
+		}
+
+		recurring->timer = ast_sched_add(ast_dns_get_sched(), (ttl + EXTRA_TTL) * 1000, dns_query_recurring_scheduled_callback, ao2_bump(recurring));
+		if (recurring->timer < 0) {
+			/* It is impossible for this to be the last reference as the query has a reference to it */
+			ao2_ref(recurring, -1);
 		}
 	}

Index: asterisk-18.8.0/res/res_rtp_asterisk.c
===================================================================
--- asterisk-18.8.0.orig/res/res_rtp_asterisk.c
+++ asterisk-18.8.0/res/res_rtp_asterisk.c
@@ -219,7 +219,7 @@ static int dtls_mtu = DEFAULT_DTLS_MTU;
 #ifdef HAVE_PJPROJECT
 static int icesupport = DEFAULT_ICESUPPORT;
 static int stun_software_attribute = DEFAULT_STUN_SOFTWARE_ATTRIBUTE;
-static struct sockaddr_in stunaddr;
+static struct stun_resolver *stunres = NULL;
 static pj_str_t turnaddr;
 static int turnport = DEFAULT_TURN_PORT;
 static pj_str_t turnusername;
@@ -283,6 +283,13 @@ struct ast_ice_host_candidate {
 	AST_RWLIST_ENTRY(ast_ice_host_candidate) next;
 };
 
+struct stun_resolver {
+	struct ast_sockaddr *address;
+	const char *hostname;
+	in_port_t port;
+	struct ast_dns_query_recurring *resolver;
+};
+
 /*! \brief List of ICE host candidate mappings */
 static AST_RWLIST_HEAD_STATIC(host_candidates, ast_ice_host_candidate);
 
@@ -655,11 +662,12 @@
 
 static int __rtp_sendto(struct ast_rtp_instance *instance, void *buf, size_t size, int flags, struct ast_sockaddr *sa, int rtcp, int *via_ice, int use_srtp);
 
 #ifdef HAVE_PJPROJECT
-static void stunaddr_resolve_callback(const struct ast_dns_query *query);
-static int store_stunaddr_resolved(const struct ast_dns_query *query);
+static int stun_resolve(struct sockaddr_in *retaddr, const struct stun_resolver *stun);
+static struct stun_resolver *stun_resolve_create(const char *hostport);
+static void stun_resolve_stop(struct stun_resolver *stun);
 #endif
 
 #if defined(HAVE_OPENSSL) && (OPENSSL_VERSION_NUMBER >= 0x10001000L) && !defined(OPENSSL_NO_SRTP)
 static int dtls_bio_new(BIO *bio)
 {
@@ -3653,12 +3661,10 @@ static void rtp_add_candidates_to_ice(st
 		freeifaddrs(ifa);
 	}
 
-	ast_rwlock_rdlock(&stunaddr_lock);
-	memcpy(&stunaddr_copy, &stunaddr, sizeof(stunaddr));
-	ast_rwlock_unlock(&stunaddr_lock);
+	stun_resolve(&stun_addr_copy, stunres);

 	/* If configured to use a STUN server to get our external mapped address do so */
 	if (stunaddr_copy.sin_addr.s_addr && !stun_address_is_blacklisted(addr) &&
 		(ast_sockaddr_is_ipv4(addr) || ast_sockaddr_is_any(addr)) &&
 		count < PJ_ICE_MAX_CAND) {
 		struct sockaddr_in answer;
@@ -9033,74 +9039,169 @@ static int ast_rtp_bundle(struct ast_rtp
 	return 0;
 }
 
 #ifdef HAVE_PJPROJECT
-static void stunaddr_resolve_callback(const struct ast_dns_query *query)
-{
-	const int lowest_ttl = ast_dns_result_get_lowest_ttl(ast_dns_query_get_result(query));
-	const char *stunaddr_name = ast_dns_query_get_name(query);
-	const char *stunaddr_resolved_str;
-
-	if (!store_stunaddr_resolved(query)) {
-		ast_log(LOG_WARNING, "Failed to resolve stunaddr '%s'. Cancelling recurring resolution.\n", stunaddr_name);
-		return;
-	}
-
-	if (DEBUG_ATLEAST(2)) {
-		ast_rwlock_rdlock(&stunaddr_lock);
-		stunaddr_resolved_str = ast_inet_ntoa(stunaddr.sin_addr);
-		ast_rwlock_unlock(&stunaddr_lock);
-
-		ast_debug_stun(2, "Resolved stunaddr '%s' to '%s'. Lowest TTL = %d.\n",
-			stunaddr_name,
-			stunaddr_resolved_str,
-			lowest_ttl);
-	}
-
-	if (!lowest_ttl) {
-		ast_log(LOG_WARNING, "Resolution for stunaddr '%s' returned TTL = 0. Recurring resolution was cancelled.\n", ast_dns_query_get_name(query));
-	}
-}
-
-static int store_stunaddr_resolved(const struct ast_dns_query *query)
-{
-	const struct ast_dns_result *result = ast_dns_query_get_result(query);
-	const struct ast_dns_record *record;
-
-	for (record = ast_dns_result_get_records(result); record; record = ast_dns_record_get_next(record)) {
-		const size_t data_size = ast_dns_record_get_data_size(record);
-		const unsigned char *data = (unsigned char *)ast_dns_record_get_data(record);
-		const int rr_type = ast_dns_record_get_rr_type(record);
-
-		if (rr_type == ns_t_a && data_size == 4) {
-			ast_rwlock_wrlock(&stunaddr_lock);
-			memcpy(&stunaddr.sin_addr, data, data_size);
-			stunaddr.sin_family = AF_INET;
-			ast_rwlock_unlock(&stunaddr_lock);
-
-			return 1;
-		} else {
-			ast_debug_stun(3, "Unrecognized rr_type '%u' or data_size '%zu' from DNS query for stunaddr '%s'\n",
-										 rr_type, data_size, ast_dns_query_get_name(query));
-			continue;
-		}
-	}
-	return 0;
-}
-
-static void clean_stunaddr(void) {
-	if (stunaddr_resolver) {
-		if (ast_dns_resolve_recurring_cancel(stunaddr_resolver)) {
-			ast_log(LOG_ERROR, "Failed to cancel recurring DNS resolution of previous stunaddr.\n");
-		}
-		ao2_ref(stunaddr_resolver, -1);
-		stunaddr_resolver = NULL;
-	}
-	ast_rwlock_wrlock(&stunaddr_lock);
-	memset(&stunaddr, 0, sizeof(stunaddr));
-	ast_rwlock_unlock(&stunaddr_lock);
-}
+static void stun_resolve_destroy(void *obj)
+{
+	struct stun_resolver *stun = obj;
+
+	if (stun->address) {
+		ast_sockaddr_setnull(stun->address);
+		ast_free(stun->address);
+		stun->address = NULL;
+	}
+	if (stun->hostname) {
+		ast_free((char *) stun->hostname);
+		stun->hostname = NULL;
+	}
+}
+
+static void stun_resolve_callback(const struct ast_dns_query *query)
+{
+	const char *data = NULL;
+	const char *hostname = NULL;
+	struct stun_resolver *stun = ast_dns_query_get_data(query);
+	struct ast_dns_result *result = ast_dns_query_get_result(query);
+	const struct ast_dns_record *record = ast_dns_result_get_records(result);
+	int ttl = ast_dns_result_get_lowest_ttl(result);
+
+	for (; record; record = ast_dns_record_get_next(record)) {
+		const size_t datasize = ast_dns_record_get_data_size(record);
+		const int rr_type = ast_dns_record_get_rr_type(record);
+		data = ast_dns_record_get_data(record);
+
+		switch (rr_type) {
+		case T_A:
+			if (datasize != 4) {
+				ast_debug_stun(2,
+							   "Retrieved an A record, but record size is invalid (size: %u, expected: %u)",
+							   (unsigned int) datasize,
+							   (unsigned int) 4);
+				continue;
+			}
+			ao2_lock(stun);
+			memcpy(&((struct sockaddr_in *) &(stun->address->ss))->sin_addr, data, datasize);
+			hostname = ast_strdupa(stun->hostname);
+			ao2_unlock(stun);
+			goto success;
+
+		case T_AAAA:
+			ast_debug_stun(2, "Retrieved an AAAA record, but STUN implementation doesn't support IPv6.");
+			continue;
+
+		default:
+			ast_debug_stun(2, "Received invalid STUN address: '%s', moving to next entry...",
+						   ast_inet_ntoa(*(struct in_addr *) data));
+			continue;
+		}
+	}
+	ast_debug_stun(2, "No valid entries found for STUN from DNS server.");
+	return;
+
+success:
+	ast_debug_stun(2,
+				   "Resolved STUN from DNS: '%s' -> '%s' (renews in %ds)",
+				   hostname,
+				   ast_inet_ntoa(*(struct in_addr *) data),
+				   ttl);
+}
+
+static int stun_resolve_init(struct stun_resolver *stun, const char *hostport)
+{
+	const char *szhostname = NULL;
+	const char *szport = NULL;
+	char *szinput = ast_strdupa(hostport);
+
+	if (!hostport || !stun || !szinput) {
+		return -1;
+	}
+
+	if (!ast_sockaddr_split_hostport((char *) szinput, (char **) &szhostname, (char **) &szport, 0)) {
+		ast_log(LOG_ERROR, "STUN address '%s' is using an invalid format, must use ipv4[:port] or host.name[:port] format", hostport);
+		return -1;
+	}
+	stun->hostname = ast_strdup(szhostname);
+	ast_parse_arg(szport, PARSE_UINT32 | PARSE_IN_RANGE | PARSE_DEFAULT, &stun->port, STANDARD_STUN_PORT, 1, 65535);
+
+	/* Check if it's an IPv4 address */
+	if (!ast_parse_arg(stun->hostname, PARSE_ADDR | PARSE_PORT_IGNORE, stun->address))
+	{
+		if (!ast_sockaddr_is_ipv4(stun->address)) {
+			ast_debug_stun(2, "STUN implementation doesn't support IPv6 addresses.");
+			return -1;
+		}
+		ast_sockaddr_set_port(stun->address, stun->port);
+		ast_debug_stun(2, "Resolving STUN using static address at '%s:%u'", stun->hostname, stun->port);
+	}
+	/* Else it's a canonical name that must be resolved */
+	else if (!ast_sockaddr_resolve_first_af(stun->address, stun->hostname, 0, AF_INET)) {
+		ast_sockaddr_set_port(stun->address, stun->port);
+		stun->resolver = ast_dns_resolve_recurring(stun->hostname, T_A, C_IN, stun_resolve_callback, stun);
+		if (!stun->resolver) {
+			ast_log(LOG_ERROR, "Failed to start recurring dns query");
+			return -1;
+		}
+		ast_debug_stun(2, "Initialized recurring DNS query to resolve STUN");
+	}
+	/* Not an IPv4 nor a CNAME */
+	else {
+		ast_log(LOG_ERROR, "Unable to parse STUN address: '%s'", hostport);
+		return -1;
+	}
+
+	return 0;
+}
+
+static struct stun_resolver *stun_resolve_create(const char *hostport)
+{
+	struct stun_resolver *stun = NULL;
+
+	if (!(stun = ao2_alloc(sizeof(*stun), stun_resolve_destroy))) {
+		goto failure;
+	}
+
+	if (!(stun->address = ast_calloc(1, sizeof(*stun->address)))) {
+		goto failure;
+	}
+
+	if (stun_resolve_init(stun, hostport)) {
+		goto failure;
+	}
+
+	return stun;
+
+failure:
+	ast_log(LOG_ERROR, "Failed to create STUN resolver.\n");
+	ao2_cleanup(stun);
+	return NULL;
+}
+
+static void stun_resolve_stop(struct stun_resolver *stun)
+{
+	if (stun) {
+		if (stun->resolver) {
+			if (ast_dns_resolve_recurring_cancel(stun->resolver)) {
+				ast_log(LOG_ERROR, "Failed to stop STUN recurring resolver.\n");
+			}
+			ao2_cleanup(stun->resolver);
+			stun->resolver = NULL;
+		}
+		ao2_cleanup(stun);
+	}
+}
+
+static int stun_resolve(struct sockaddr_in *retsin, const struct stun_resolver *stun)
+{
+	if (!stun || !retsin) {
+		return -1;
+	}
+
+	ao2_lock((struct stun_resolver *) stun);
+	ast_sockaddr_to_sin(stun->address, retsin);
+	ao2_unlock((struct stun_resolver *) stun);
+	return 0;
+}
 #endif
 
 #if defined(HAVE_OPENSSL) && (OPENSSL_VERSION_NUMBER >= 0x10001000L) && !defined(OPENSSL_NO_SRTP)
 /*! \pre instance is locked */
 static int ast_rtp_activate(struct ast_rtp_instance *instance)
@@ -9233,14 +9334,13 @@ static char *handle_cli_rtp_settings(str
 	ast_cli(a->fd, "  Replay Protect:  %s\n", AST_CLI_YESNO(srtp_replay_protection));
 #ifdef HAVE_PJPROJECT
 	ast_cli(a->fd, "  ICE support:     %s\n", AST_CLI_YESNO(icesupport));
 
-	ast_rwlock_rdlock(&stunaddr_lock);
-	memcpy(&stunaddr_copy, &stunaddr, sizeof(stunaddr));
-	ast_rwlock_unlock(&stunaddr_lock);
-	ast_cli(a->fd, "  STUN address:    %s:%d\n", ast_inet_ntoa(stunaddr_copy.sin_addr), htons(stunaddr_copy.sin_port));
+	if (!stun_resolve(&stunaddr_copy, stunres)) {
+		ast_cli(a->fd, "  STUN address:    %s:%d\n", ast_inet_ntoa(stunaddr_copy.sin_addr), htons(stunaddr_copy.sin_port));
+	}
 #endif
 	return CLI_SUCCESS;
 }
 
 
 static char *handle_cli_rtcp_set_debug(struct ast_cli_entry *e, int cmd, struct ast_cli_args *a)
@@ -9486,11 +9586,11 @@ static int rtp_reload(int reload, int by
 	icesupport = DEFAULT_ICESUPPORT;
 	stun_software_attribute = DEFAULT_STUN_SOFTWARE_ATTRIBUTE;
 	turnport = DEFAULT_TURN_PORT;
-	clean_stunaddr();
+	stun_resolve_stop(stunres);
 	turnaddr = pj_str(NULL);
 	turnusername = pj_str(NULL);
 	turnpassword = pj_str(NULL);
 	host_candidate_overrides_clear();
 #endif
 
 #if defined(HAVE_OPENSSL) && (OPENSSL_VERSION_NUMBER >= 0x10001000L) && !defined(OPENSSL_NO_SRTP)
@@ -9564,36 +9664,8 @@ static int rtp_reload(int reload, int by
 		stun_software_attribute = ast_true(s);
 	}
 	if ((s = ast_variable_retrieve(cfg, "general", "stunaddr"))) {
-		char *hostport, *host, *port;
-		unsigned int port_parsed = STANDARD_STUN_PORT;
-		struct ast_sockaddr stunaddr_parsed;
-
-		hostport = ast_strdupa(s);
-
-		if (!ast_parse_arg(hostport, PARSE_ADDR, &stunaddr_parsed)) {
-			ast_debug_stun(3, "stunaddr = '%s' does not need name resolution\n",
-				ast_sockaddr_stringify_host(&stunaddr_parsed));
-			if (!ast_sockaddr_port(&stunaddr_parsed)) {
-				ast_sockaddr_set_port(&stunaddr_parsed, STANDARD_STUN_PORT);
-			}
-			ast_rwlock_wrlock(&stunaddr_lock);
-			ast_sockaddr_to_sin(&stunaddr_parsed, &stunaddr);
-			ast_rwlock_unlock(&stunaddr_lock);
-		} else if (ast_sockaddr_split_hostport(hostport, &host, &port, 0)) {
-			if (port) {
-				ast_parse_arg(port, PARSE_UINT32|PARSE_IN_RANGE, &port_parsed, 1, 65535);
-			}
-			stunaddr.sin_port = htons(port_parsed);
-
-			stunaddr_resolver = ast_dns_resolve_recurring(host, T_A, C_IN,
-				&stunaddr_resolve_callback, NULL);
-			if (!stunaddr_resolver) {
-				ast_log(LOG_ERROR, "Failed to setup recurring DNS resolution of stunaddr '%s'",
-					host);
-			}
-		} else {
-			ast_log(LOG_ERROR, "Failed to parse stunaddr '%s'", hostport);
-		}
+		char *hostport = ast_strdupa(s);
+		stunres = stun_resolve_create(hostport);
 	}
	if ((s = ast_variable_retrieve(cfg, "general", "turnaddr"))) {
		struct sockaddr_in addr;
@@ -9852,7 +9924,7 @@ static int unload_module(void)
 	acl_change_sub = stasis_unsubscribe_and_join(acl_change_sub);
 	rtp_unload_acl(&ice_acl_lock, &ice_acl);
 	rtp_unload_acl(&stun_acl_lock, &stun_acl);
-	clean_stunaddr();
+	stun_resolve_stop(stunres);
 #endif
 
 	return 0;
